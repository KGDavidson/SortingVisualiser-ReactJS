[{"C:\\Users\\kreat\\Documents\\GitHub\\SortingVisualiser-ReactJS\\app\\src\\App.js":"1","C:\\Users\\kreat\\Documents\\GitHub\\SortingVisualiser-ReactJS\\app\\src\\SortingVisualiser\\OptionsPanelSV.js":"2","C:\\Users\\kreat\\Documents\\GitHub\\SortingVisualiser-ReactJS\\app\\src\\SortingVisualiser\\SortingVisualiser.js":"3","C:\\Users\\kreat\\Documents\\GitHub\\SortingVisualiser-ReactJS\\app\\src\\SortingVisualiser\\BarPanel.js":"4","C:\\Users\\kreat\\Documents\\GitHub\\SortingVisualiser-ReactJS\\app\\src\\reportWebVitals.js":"5"},{"size":239,"mtime":1606338664481,"results":"6","hashOfConfig":"7"},{"size":1987,"mtime":1606338839641,"results":"8","hashOfConfig":"7"},{"size":8246,"mtime":1606339864808,"results":"9","hashOfConfig":"7"},{"size":1061,"mtime":1606338777859,"results":"10","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1j0y4ul",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\kreat\\Documents\\GitHub\\SortingVisualiser-ReactJS\\app\\src\\App.js",[],"C:\\Users\\kreat\\Documents\\GitHub\\SortingVisualiser-ReactJS\\app\\src\\SortingVisualiser\\OptionsPanelSV.js",[],"C:\\Users\\kreat\\Documents\\GitHub\\SortingVisualiser-ReactJS\\app\\src\\SortingVisualiser\\SortingVisualiser.js",["23","24","25"],"import React, {useEffect, useState} from 'react';\r\nimport OptionsPanel from './OptionsPanelSV'\r\nimport BarPanel from './BarPanel'\r\nimport './SortingVisualiser.css';\r\n\r\nvar isStarted = false;\r\n\r\nconst SortingVisualiser = () => {\r\n    const [sampleSize, SetSampleSize] = useState(1);\r\n    const [sortAlg, SetSortAlg] = useState(\"0\");\r\n    const [sortSpeed, SetSortSpeed] = useState(100);\r\n    const [dataValues, SetDataValues] = useState([]);\r\n    const [currentCheck, SetCurrentCheck] = useState([]);\r\n    const [currentSwitching, SetCurrentSwitching] = useState([]);\r\n\r\n    useEffect(() => {\r\n        document.title = \"Sorting Visualiser\"\r\n    }, []);\r\n\r\n    const Pause = () => { \r\n        return new Promise(resolve => { \r\n            setTimeout(() => { \r\n                resolve(); \r\n            }, sortSpeed); \r\n        }); \r\n    };\r\n\r\n    const SetStarted = (i) => {\r\n        isStarted = i;\r\n    }\r\n\r\n    const SampleSizeSet = (sampleSizeVal) => {\r\n        isStarted = false;\r\n        SetSampleSize(sampleSizeVal);\r\n        SetDataValues(Array.from({length: sampleSizeVal}, () => Math.floor(Math.random() * 92) + 1));\r\n    }\r\n\r\n    const SortAlgSet = (sortAlgVal) => {\r\n        SetSortAlg(sortAlgVal);\r\n      }\r\n  \r\n    const SortSpeedSet = (sortSpeedVal) => {\r\n        SetSortSpeed(100 * (1 - sortSpeedVal));\r\n    }\r\n\r\n    const StartSort = (isStartedVal) => {\r\n        SetStarted(isStartedVal);\r\n        if (isStarted) {\r\n            if (sortAlg === \"0\") {\r\n            BubbleSort(dataValues, dataValues.length);\r\n            }\r\n            if (sortAlg === \"1\") {\r\n            InsertionSort(dataValues, dataValues.length);\r\n            }\r\n            if (sortAlg === \"2\") {\r\n            QuickSort(dataValues, 0, dataValues.length - 1);\r\n            }\r\n            if (sortAlg === \"3\") {\r\n            MergeSort(dataValues, 0, dataValues.length - 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    const QuickSortPartitionData = async (dataValuesTemp, low, high) => {\r\n        var i = low - 1;\r\n        const pivot = dataValuesTemp[high];\r\n        \r\n        SetCurrentCheck([]);\r\n        SetCurrentSwitching([]);\r\n\r\n        for (var j = low; j < high; j++) {\r\n            SetCurrentCheck([i, j]);\r\n            await Pause();\r\n            if (dataValuesTemp[j] < pivot) {\r\n                SetCurrentSwitching([i, j]);\r\n            await Pause();\r\n            i += 1;\r\n            const temp = dataValuesTemp[i];\r\n            dataValuesTemp[i] = dataValuesTemp[j];\r\n            dataValuesTemp[j] = temp;\r\n            SetDataValues(Array.from(dataValuesTemp));\r\n            await Pause();\r\n            }\r\n            \r\n            if (!isStarted) {\r\n            break;\r\n            }\r\n        }\r\n\r\n        const temp = dataValuesTemp[i+1];\r\n        dataValuesTemp[i+1] = dataValuesTemp[high];\r\n        dataValuesTemp[high] = temp;\r\n        \r\n        SetDataValues(Array.from(dataValuesTemp));\r\n        await Pause();\r\n\r\n        return (dataValuesTemp, i+1);\r\n    }\r\n\r\n    const MergeSortMergeArrays = async (arr, l, m, r) => {\r\n        SetCurrentSwitching([]);\r\n        if (isStarted) {\r\n            const n1 = m - l + 1;\r\n            const n2 = r - m;\r\n\r\n            var L = [];\r\n            var R = [];\r\n            \r\n            for (var i = 0; i < n1; ++i){\r\n                L[i] = arr[l + i];\r\n            }\r\n\r\n            for (var j = 0; j < n2; ++j){\r\n                R[j] = arr[m + 1 + j];\r\n            }\r\n\r\n\r\n            var i = 0;\r\n            var j = 0;\r\n            var k = l;\r\n\r\n            while (i < n1 && j < n2) {\r\n                SetCurrentSwitching([k]);\r\n                SetCurrentCheck([l + i, m + 1 + j]);\r\n                await Pause();\r\n                if (L[i] <= R[j]) {\r\n                    arr[k] = L[i];\r\n                    i++;\r\n                }\r\n                else {\r\n                    arr[k] = R[j];\r\n                    j++;\r\n                }\r\n                SetDataValues(Array.from(arr));\r\n                k++;\r\n            }\r\n\r\n            while (i < n1) {\r\n                arr[k] = L[i];\r\n                SetCurrentSwitching([k]);\r\n                await Pause();\r\n                i++;\r\n                k++;\r\n                SetDataValues(Array.from(arr));\r\n            }\r\n\r\n            while (j < n2) {\r\n                arr[k] = R[j];\r\n                SetCurrentSwitching([k]);\r\n                await Pause();\r\n                j++;\r\n                k++;\r\n                SetDataValues(Array.from(arr));\r\n            }\r\n        }\r\n    }\r\n\r\n    const BubbleSort = async (dataValuesTemp, l) => {\r\n        var flag = 1;\r\n        while (flag !== 0){\r\n            flag = 0;\r\n            for (var i = 0; i < l - 1; i++){\r\n                SetCurrentSwitching([]);\r\n                SetCurrentCheck([i, i+1]);\r\n                await Pause();\r\n                if (dataValuesTemp[i] > dataValuesTemp[i+1]) {\r\n                    flag = 1;\r\n                    var temp = dataValuesTemp[i];\r\n                    dataValuesTemp[i] = dataValuesTemp[i+1];\r\n                    dataValuesTemp[i+1] = temp;\r\n                    SetCurrentSwitching([i, i+1]);\r\n                    await Pause();\r\n                    SetDataValues(Array.from(dataValuesTemp));\r\n                }\r\n                await Pause();\r\n                if (!isStarted) {\r\n                    break;\r\n                }\r\n            }\r\n            if (!isStarted) {\r\n                break;\r\n            }\r\n        }\r\n        SetCurrentSwitching([]);\r\n        SetCurrentCheck([]);\r\n        SetDataValues(Array.from(dataValuesTemp));\r\n        await Pause();\r\n    }\r\n\r\n    const InsertionSort = async (dataValuesTemp, l) => {\r\n        for (var i = 1; i < l; i++) {\r\n            SetCurrentSwitching([]);\r\n            const temp = dataValuesTemp[i];\r\n            SetCurrentCheck([i]);\r\n            await Pause();\r\n            var j = i - 1;\r\n            while (j >= 0 && temp < dataValuesTemp[j]){\r\n                dataValuesTemp[j + 1] = dataValuesTemp[j];\r\n                SetDataValues(Array.from(dataValuesTemp));\r\n                SetCurrentCheck([j + 1, j]);\r\n                await Pause();\r\n                j -= 1;\r\n\r\n                SetCurrentSwitching([j+1]);\r\n                dataValuesTemp[j + 1] = temp;\r\n                SetDataValues(Array.from(dataValuesTemp));\r\n                await Pause();\r\n                if (!isStarted) {\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            if (!isStarted) {\r\n                break;\r\n            }\r\n        }\r\n        SetCurrentSwitching([]);\r\n        SetCurrentCheck([]);\r\n        SetDataValues(Array.from(dataValuesTemp));\r\n        await Pause();\r\n    }\r\n\r\n    const QuickSort = async (dataValuesTemp, low, high) => {\r\n        if (low < high && isStarted) {\r\n            var dataValuesTemp, pi = await QuickSortPartitionData(dataValuesTemp, low, high);\r\n            SetDataValues(Array.from(dataValuesTemp));\r\n\r\n            await Pause();\r\n            await QuickSort(dataValuesTemp, low, pi - 1);\r\n            await QuickSort(dataValuesTemp, pi + 1, high);\r\n        }\r\n\r\n        SetCurrentCheck([]);\r\n        SetCurrentSwitching([]);\r\n        SetDataValues(Array.from(dataValuesTemp));\r\n    }\r\n\r\n    const MergeSort = async (dataValuesTemp, start, end) => {\r\n        if(start < end && isStarted) {\r\n            const mid = parseInt((start + end) / 2);\r\n            SetCurrentCheck([start, mid]);\r\n            await Pause();\r\n            await MergeSort(dataValuesTemp, start, mid);\r\n            SetCurrentCheck([end, mid+1]);\r\n            await Pause();\r\n            await MergeSort(dataValuesTemp, mid+1, end);\r\n            await MergeSortMergeArrays(dataValuesTemp, start, mid, end);\r\n        }\r\n\r\n        SetDataValues(Array.from(dataValuesTemp));\r\n        SetCurrentCheck([]);\r\n        SetCurrentSwitching([]);\r\n    }\r\n\r\n    return (\r\n        <div className=\"SortingVisualiser\">\r\n            <OptionsPanel SampleSizeSet={SampleSizeSet} SortAlgSet={SortAlgSet} StartSort={StartSort} SortSpeedSet={SortSpeedSet} sampleSize={sampleSize} SetStarted={SetStarted}/>\r\n            <BarPanel sampleSize={sampleSize} dataValues={dataValues} currentCheck={currentCheck} currentSwitching={currentSwitching}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SortingVisualiser;","C:\\Users\\kreat\\Documents\\GitHub\\SortingVisualiser-ReactJS\\app\\src\\SortingVisualiser\\BarPanel.js",[],"C:\\Users\\kreat\\Documents\\GitHub\\SortingVisualiser-ReactJS\\app\\src\\reportWebVitals.js",[],{"ruleId":"26","severity":1,"message":"27","line":118,"column":17,"nodeType":"28","messageId":"29","endLine":118,"endColumn":18},{"ruleId":"26","severity":1,"message":"30","line":119,"column":17,"nodeType":"28","messageId":"29","endLine":119,"endColumn":18},{"ruleId":"26","severity":1,"message":"31","line":225,"column":17,"nodeType":"28","messageId":"29","endLine":225,"endColumn":31},"no-redeclare","'i' is already defined.","Identifier","redeclared","'j' is already defined.","'dataValuesTemp' is already defined."]