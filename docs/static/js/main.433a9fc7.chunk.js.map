{"version":3,"sources":["SortingVisualiser/OptionsPanelSV.js","SortingVisualiser/BarPanel.js","SortingVisualiser/SortingVisualiser.js","App.js","reportWebVitals.js","index.js"],"names":["OptionsPanel","props","useState","isStarted","SetStarted","ReturnInputValue","e","value","target","SampleSizeSet","ReturnSampleSize","className","onChange","type","defaultValue","SortAlgSet","ReturnSortAlg","SortSpeedSet","ReturnSpeed","min","max","step","onClick","sampleSize","StartSort","BarPanel","Bar","barWidth","dataValues","barColour","style","width","height","marginTop","backgroundColor","barsArray","i","currentCheck","includes","currentSwitching","push","GenBars","SortingVisualiser","SetSampleSize","sortAlg","SetSortAlg","sortSpeed","SetSortSpeed","SetDataValues","SetCurrentCheck","SetCurrentSwitching","useEffect","document","title","Pause","Promise","resolve","setTimeout","QuickSortPartitionData","dataValuesTemp","low","high","a","pivot","j","temp","Array","from","MergeSortMergeArrays","arr","l","m","r","n1","n2","L","R","k","BubbleSort","flag","InsertionSort","QuickSort","pi","MergeSort","start","end","mid","parseInt","sampleSizeVal","length","Math","floor","random","sortAlgVal","isStartedVal","sortSpeedVal","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.433a9fc7.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport './OptionsPanelSV.css';\r\n\r\nconst OptionsPanel = (props) => {\r\n    const [isStarted, SetStarted] = useState(false);\r\n\r\n    const StartSort = () => {\r\n        if (props.sampleSize !== 0) {\r\n            SetStarted(!isStarted);\r\n            props.StartSort(!isStarted);\r\n        }\r\n    }\r\n\r\n    const ReturnSampleSize = (value) => {\r\n        SetStarted(false);\r\n        props.SampleSizeSet(value);\r\n    }\r\n\r\n    const ReturnInputValue = (e) => {\r\n        var value = e.target.value;\r\n        if (value < 1) {\r\n            value = 1;\r\n        }\r\n        if (value > 100) {\r\n            value = 100;\r\n        }\r\n        e.target.value = value;\r\n        ReturnSampleSize(value);\r\n    }\r\n\r\n    const ReturnSortAlg = (e) => {\r\n        props.SortAlgSet(e.target.value);\r\n    }\r\n\r\n    const ReturnSpeed = (e) => {\r\n        props.SortSpeedSet(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"OptionsPanel\">\r\n            <h1>SORTING VISUALISER</h1>\r\n            <h3>Sample Size\r\n                <br/>\r\n                <input className=\"ssInput\" onChange={e => {ReturnInputValue(e)}} type=\"number\" defaultValue={1}/>\r\n            </h3>\r\n            <br/>\r\n            <h3>Sorting Algorithm\r\n                <br/>\r\n                <select onChange={e => {ReturnSortAlg(e)}}>\r\n                    <option value=\"0\">Bubble Sort</option>\r\n                    <option value=\"1\">Insertion Sort</option>\r\n                    <option value=\"2\">Quick Sort</option>\r\n                    <option value=\"3\">Merge Sort</option>\r\n                </select>    \r\n            </h3>\r\n            <br/>\r\n            <h3>Sorting Speed\r\n                <br/>\r\n                <input onChange={e => {ReturnSpeed(e)}} className=\"slider\" type=\"range\" min=\"0\" max=\"0.99\" step=\"0.01\"/>\r\n            </h3>\r\n            <br/>\r\n            <button onClick={StartSort}>{isStarted ? \"Reset\" : \"Start\"}</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OptionsPanel;","import React from 'react';\r\nimport './BarPanel.css';\r\n\r\nconst BarPanel = (props) => {\r\n    const GenBars = () => {\r\n        var barWidth = 70 / props.sampleSize;\r\n        var barsArray = [];\r\n        var barColour = \"ea5455\";\r\n        for (var i = 0; i < props.sampleSize; i++) {\r\n            barColour = \"ea5455\";\r\n            if (props.currentCheck.includes(i)) {\r\n                barColour = \"f07b3f\";\r\n            }\r\n            if (props.currentSwitching.includes(i)) {\r\n                barColour = \"e8e8e8\";\r\n            }\r\n            barsArray.push(Bar(barWidth, props.dataValues[i], barColour))\r\n        }\r\n        return (barsArray);\r\n    }\r\n    \r\n    const Bar = (barWidth, dataValues, barColour) => {\r\n        return (\r\n            <div style={{width: + barWidth + 'vw', height: dataValues + 'vh', marginTop: 93 - dataValues + 'vh', backgroundColor: '#' + barColour}} className=\"Bar\"></div>\r\n        );\r\n    }\r\n    \r\n    return (\r\n        <div className=\"BarPanel\">\r\n                {GenBars()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BarPanel;","import React, {useEffect, useState} from 'react';\r\nimport OptionsPanel from './OptionsPanelSV'\r\nimport BarPanel from './BarPanel'\r\nimport './SortingVisualiser.css';\r\n\r\nvar isStarted = false;\r\n\r\nconst SortingVisualiser = () => {\r\n    const [sampleSize, SetSampleSize] = useState(1);\r\n    const [sortAlg, SetSortAlg] = useState(\"0\");\r\n    const [sortSpeed, SetSortSpeed] = useState(100);\r\n    const [dataValues, SetDataValues] = useState([]);\r\n    const [currentCheck, SetCurrentCheck] = useState([]);\r\n    const [currentSwitching, SetCurrentSwitching] = useState([]);\r\n\r\n    useEffect(() => {\r\n        document.title = \"Sorting Visualiser\"\r\n    }, []);\r\n\r\n    const Pause = () => { \r\n        return new Promise(resolve => { \r\n            setTimeout(() => { \r\n                resolve(); \r\n            }, sortSpeed); \r\n        }); \r\n    }\r\n\r\n    const SetStarted = (i) => {\r\n        isStarted = i;\r\n    }\r\n\r\n    const SampleSizeSet = (sampleSizeVal) => {\r\n        isStarted = false;\r\n        SetSampleSize(sampleSizeVal);\r\n        SetDataValues(Array.from({length: sampleSizeVal}, () => Math.floor(Math.random() * 92) + 1));\r\n    }\r\n\r\n    const SortAlgSet = (sortAlgVal) => {\r\n        SetSortAlg(sortAlgVal);\r\n      }\r\n  \r\n    const SortSpeedSet = (sortSpeedVal) => {\r\n        SetSortSpeed(100 * (1 - sortSpeedVal));\r\n    }\r\n\r\n    const StartSort = (isStartedVal) => {\r\n        SetStarted(isStartedVal);\r\n        if (isStarted) {\r\n            if (sortAlg === \"0\") {\r\n            BubbleSort(dataValues, dataValues.length);\r\n            }\r\n            if (sortAlg === \"1\") {\r\n            InsertionSort(dataValues, dataValues.length);\r\n            }\r\n            if (sortAlg === \"2\") {\r\n            QuickSort(dataValues, 0, dataValues.length - 1);\r\n            }\r\n            if (sortAlg === \"3\") {\r\n            MergeSort(dataValues, 0, dataValues.length - 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    const QuickSortPartitionData = async (dataValuesTemp, low, high) => {\r\n        var i = low - 1;\r\n        const pivot = dataValuesTemp[high];\r\n        \r\n        SetCurrentCheck([]);\r\n        SetCurrentSwitching([]);\r\n\r\n        for (var j = low; j < high; j++) {\r\n            SetCurrentCheck([i, j]);\r\n            await Pause();\r\n            if (dataValuesTemp[j] < pivot) {\r\n                SetCurrentSwitching([i, j]);\r\n            await Pause();\r\n            i += 1;\r\n            const temp = dataValuesTemp[i];\r\n            dataValuesTemp[i] = dataValuesTemp[j];\r\n            dataValuesTemp[j] = temp;\r\n            SetDataValues(Array.from(dataValuesTemp));\r\n            await Pause();\r\n            }\r\n            \r\n            if (!isStarted) {\r\n            break;\r\n            }\r\n        }\r\n\r\n        const temp = dataValuesTemp[i+1];\r\n        dataValuesTemp[i+1] = dataValuesTemp[high];\r\n        dataValuesTemp[high] = temp;\r\n        \r\n        SetDataValues(Array.from(dataValuesTemp));\r\n        await Pause();\r\n\r\n        return (dataValuesTemp, i+1);\r\n    }\r\n\r\n    const MergeSortMergeArrays = async (arr, l, m, r) => {\r\n        SetCurrentSwitching([]);\r\n        if (isStarted) {\r\n            const n1 = m - l + 1;\r\n            const n2 = r - m;\r\n\r\n            var L = [];\r\n            var R = [];\r\n            \r\n            for (var i = 0; i < n1; ++i){\r\n                L[i] = arr[l + i];\r\n            }\r\n\r\n            for (var j = 0; j < n2; ++j){\r\n                R[j] = arr[m + 1 + j];\r\n            }\r\n\r\n\r\n            var i = 0;\r\n            var j = 0;\r\n            var k = l;\r\n\r\n            while (i < n1 && j < n2) {\r\n                SetCurrentSwitching([k]);\r\n                SetCurrentCheck([l + i, m + 1 + j]);\r\n                await Pause();\r\n                if (L[i] <= R[j]) {\r\n                    arr[k] = L[i];\r\n                    i++;\r\n                }\r\n                else {\r\n                    arr[k] = R[j];\r\n                    j++;\r\n                }\r\n                SetDataValues(Array.from(arr));\r\n                k++;\r\n            }\r\n\r\n            while (i < n1) {\r\n                arr[k] = L[i];\r\n                SetCurrentSwitching([k]);\r\n                await Pause();\r\n                i++;\r\n                k++;\r\n                SetDataValues(Array.from(arr));\r\n            }\r\n\r\n            while (j < n2) {\r\n                arr[k] = R[j];\r\n                SetCurrentSwitching([k]);\r\n                await Pause();\r\n                j++;\r\n                k++;\r\n                SetDataValues(Array.from(arr));\r\n            }\r\n        }\r\n    }\r\n\r\n    const BubbleSort = async (dataValuesTemp, l) => {\r\n        var flag = 1;\r\n        while (flag !== 0){\r\n            flag = 0;\r\n            for (var i = 0; i < l - 1; i++){\r\n                SetCurrentSwitching([]);\r\n                SetCurrentCheck([i, i+1]);\r\n                await Pause();\r\n                if (dataValuesTemp[i] > dataValuesTemp[i+1]) {\r\n                    flag = 1;\r\n                    var temp = dataValuesTemp[i];\r\n                    dataValuesTemp[i] = dataValuesTemp[i+1];\r\n                    dataValuesTemp[i+1] = temp;\r\n                    SetCurrentSwitching([i, i+1]);\r\n                    await Pause();\r\n                    SetDataValues(Array.from(dataValuesTemp));\r\n                }\r\n                await Pause();\r\n                if (!isStarted) {\r\n                    break;\r\n                }\r\n            }\r\n            if (!isStarted) {\r\n                break;\r\n            }\r\n        }\r\n        SetCurrentSwitching([]);\r\n        SetCurrentCheck([]);\r\n        SetDataValues(Array.from(dataValuesTemp));\r\n        await Pause();\r\n    }\r\n\r\n    const InsertionSort = async (dataValuesTemp, l) => {\r\n        for (var i = 1; i < l; i++) {\r\n            SetCurrentSwitching([]);\r\n            const temp = dataValuesTemp[i];\r\n            SetCurrentCheck([i]);\r\n            await Pause();\r\n            var j = i - 1;\r\n            while (j >= 0 && temp < dataValuesTemp[j]){\r\n                dataValuesTemp[j + 1] = dataValuesTemp[j];\r\n                SetDataValues(Array.from(dataValuesTemp));\r\n                SetCurrentCheck([j + 1, j]);\r\n                await Pause();\r\n                j -= 1;\r\n\r\n                SetCurrentSwitching([j+1]);\r\n                dataValuesTemp[j + 1] = temp;\r\n                SetDataValues(Array.from(dataValuesTemp));\r\n                await Pause();\r\n                if (!isStarted) {\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            if (!isStarted) {\r\n                break;\r\n            }\r\n        }\r\n        SetCurrentSwitching([]);\r\n        SetCurrentCheck([]);\r\n        SetDataValues(Array.from(dataValuesTemp));\r\n        await Pause();\r\n    }\r\n\r\n    const QuickSort = async (dataValuesTemp, low, high) => {\r\n        if (low < high && isStarted) {\r\n            var dataValuesTemp, pi = await QuickSortPartitionData(dataValuesTemp, low, high);\r\n            SetDataValues(Array.from(dataValuesTemp));\r\n\r\n            await Pause();\r\n            await QuickSort(dataValuesTemp, low, pi - 1);\r\n            await QuickSort(dataValuesTemp, pi + 1, high);\r\n        }\r\n\r\n        SetCurrentCheck([]);\r\n        SetCurrentSwitching([]);\r\n        SetDataValues(Array.from(dataValuesTemp));\r\n    }\r\n\r\n    const MergeSort = async (dataValuesTemp, start, end) => {\r\n        if(start < end && isStarted) {\r\n            const mid = parseInt((start + end) / 2);\r\n            SetCurrentCheck([start, mid]);\r\n            await Pause();\r\n            await MergeSort(dataValuesTemp, start, mid);\r\n            SetCurrentCheck([end, mid+1]);\r\n            await Pause();\r\n            await MergeSort(dataValuesTemp, mid+1, end);\r\n            await MergeSortMergeArrays(dataValuesTemp, start, mid, end);\r\n        }\r\n\r\n        SetDataValues(Array.from(dataValuesTemp));\r\n        SetCurrentCheck([]);\r\n        SetCurrentSwitching([]);\r\n    }\r\n\r\n    return (\r\n        <div className=\"SortingVisualiser\">\r\n            <OptionsPanel SampleSizeSet={SampleSizeSet} SortAlgSet={SortAlgSet} StartSort={StartSort} SortSpeedSet={SortSpeedSet} sampleSize={sampleSize} SetStarted={SetStarted}/>\r\n            <BarPanel sampleSize={sampleSize} dataValues={dataValues} currentCheck={currentCheck} currentSwitching={currentSwitching}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SortingVisualiser;","import SortingVisualiser from './SortingVisualiser/SortingVisualiser'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <div className=\"navBar\">\n      </div>\n      <SortingVisualiser/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}